/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hotmail.doljin99;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonWriter;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.sql.SQLException;
import java.util.NoSuchElementException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.TreePath;
import org.mindrot.jbcrypt.BCrypt;

/**
 *
 * @author dolji
 */
public class H2ServerAdmin extends javax.swing.JFrame {

    public static final String SERVER_MEN_PATH = "server.json";
    public static final String DATABASE_MEN_PATH = "database.json";

    private ServerMen serverList;
//    private DatabaseMen databaseList;
    private ServerTreePane serverTreePane;

    /**
     * Creates new form HeServerAdmin
     */
    public H2ServerAdmin() {
        initComponents();

        init();
    }

    private void init() {

        setIconImage(new ImageIcon(H2ServerAdmin.class.getResource("h2admin.png")).getImage());
        setSize(920, 810);
        jSplitPane1.setDividerLocation(645);
        serverList = readServerMen();
//        databaseList = readDatabaseMen();
        serverTreePane = new ServerTreePane(serverList, jTextAreaStatus);
        jPanelServers.add(serverTreePane, BorderLayout.CENTER);
        jPanelServers.validate();
//        jSplitPaneServers.add(serverTreePane, JSplitPane.LEFT);
//        jSplitPaneServers.validate();
        setLocationRelativeTo(this);
    }

    private ServerMen readServerMen() {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        BufferedReader br = null;
        try {
            java.lang.reflect.Type serverType = new TypeToken<ServerMen>() {
            }.getType();
            br = new BufferedReader(new InputStreamReader(new FileInputStream(SERVER_MEN_PATH), "UTF-8"));

            ServerMen serverMen = gson.fromJson(br, serverType);
            if (serverMen == null) {
                serverMen = new ServerMen();
            }

            return serverMen;
        } catch (NoSuchElementException ex) {
            logMessage("열기 실패: 파일이 비었거나 ServerMen 의 형식이 아님." + ex.getLocalizedMessage());
            return new ServerMen();
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            logMessage("열기 실패: " + ex.getLocalizedMessage());
            return new ServerMen();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ex) {
                }
            }
        }
    }

//    private DatabaseMen readDatabaseMen() {
//        Gson gson = new GsonBuilder().setPrettyPrinting().create();
//        BufferedReader br = null;
//        try {
//            java.lang.reflect.Type databaseType = new TypeToken<DatabaseMen>() {
//            }.getType();
//            br = new BufferedReader(new InputStreamReader(new FileInputStream(DATABASE_MEN_PATH), "UTF-8"));
//
//            DatabaseMen databaseMen = gson.fromJson(br, databaseType);
//
//            return databaseMen;
//        } catch (NoSuchElementException ex) {
//            logMessage("열기 실패: 파일이 비었거나 DatabaseMen 의 형식이 아님." + ex.getLocalizedMessage());
//            return new DatabaseMen();
//        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
//            logMessage("열기 실패: " + ex.getLocalizedMessage());
//            return new DatabaseMen();
//        } finally {
//            if (br != null) {
//                try {
//                    br.close();
//                } catch (IOException ex) {
//                }
//            }
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButtonAddServer = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButtonStopServer = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButtonDeleteServer = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButtonRefreshTree = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelServers = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaStatus = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemLogin = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("H2 서버 관리 도구");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setRollover(true);

        jButtonAddServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/New16.gif"))); // NOI18N
        jButtonAddServer.setText("server");
        jButtonAddServer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAddServer.setFocusable(false);
        jButtonAddServer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddServerActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonAddServer);
        jToolBar1.add(jSeparator1);

        jButtonStopServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Stop16.gif"))); // NOI18N
        jButtonStopServer.setText("stop server");
        jButtonStopServer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonStopServer.setFocusable(false);
        jButtonStopServer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonStopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopServerActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonStopServer);
        jToolBar1.add(jSeparator2);

        jButtonDeleteServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Delete16.gif"))); // NOI18N
        jButtonDeleteServer.setText("server");
        jButtonDeleteServer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonDeleteServer.setFocusable(false);
        jButtonDeleteServer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDeleteServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteServerActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonDeleteServer);
        jToolBar1.add(jSeparator3);

        jButtonRefreshTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Refresh16.gif"))); // NOI18N
        jButtonRefreshTree.setText("Refresh tree");
        jButtonRefreshTree.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonRefreshTree.setFocusable(false);
        jButtonRefreshTree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRefreshTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshTreeActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonRefreshTree);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanelServers.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Servers", jPanelServers);

        jSplitPane1.setLeftComponent(jTabbedPane1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTextAreaStatus.setEditable(false);
        jTextAreaStatus.setColumns(20);
        jTextAreaStatus.setRows(5);
        jScrollPane1.setViewportView(jTextAreaStatus);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenuFile.setText("File");

        jMenuItemLogin.setText("login");
        jMenuItemLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoginActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLogin);

        jMenuBar1.add(jMenuFile);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int stop = JOptionPane.showConfirmDialog(this, "종료하시겠습니까?", "종료 확인", JOptionPane.OK_CANCEL_OPTION);
        if (stop != JOptionPane.OK_OPTION) {
            return;
        }
        if (serverList == null) {
            System.exit(0);
        }
        for (int i = 0; i < serverList.size(); i++) {
            ServerMan serverMan = serverList.get(i);
            if (serverMan.isRun()) {
                try {
                    serverMan.stop();
                } catch (SQLException ex) {
                    System.out.println("H2관리 앱 종료시 " + serverMan.getServerName() + " 서버 정지 에러: " + ex.getLocalizedMessage());
                }
            }
        }
        
        saveServerInformation();
//        try {
//            java.lang.reflect.Type databaseType = new TypeToken<ServerMen>() {
//            }.getType();
//            databaseWriter = new OutputStreamWriter(new FileOutputStream(DATABASE_MEN_PATH), "UTF-8");
//            JsonWriter jsonWriter = new JsonWriter(databaseWriter);
//            gson.toJson(databaseList, databaseType, jsonWriter);
//            logMessage("데이터베이스 정보 저장 되었습니다.");
//        } catch (UnsupportedEncodingException | FileNotFoundException ex) {
//            logMessage("데이터베이스 정보 저장 중 에러: " + ex.getLocalizedMessage());
//        } finally {
//            if (databaseWriter != null) {
//                try {
//                    databaseWriter.close();
//                } catch (IOException ex) {
//                }
//            }
//        }
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void saveServerInformation() {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        Writer serverWriter = null;
//        Writer databaseWriter = null;

        try {
            java.lang.reflect.Type serverType = new TypeToken<ServerMen>() {
            }.getType();
            serverWriter = new OutputStreamWriter(new FileOutputStream(SERVER_MEN_PATH), "UTF-8");
            JsonWriter jsonWriter = new JsonWriter(serverWriter);
            gson.toJson(serverList, serverType, jsonWriter);
            logMessage("서버 정보 저장 되었습니다.");
        } catch (UnsupportedEncodingException | FileNotFoundException ex) {
            logMessage("서버 정보 저장 중 에러: " + ex.getLocalizedMessage());
        } finally {
            if (serverWriter != null) {
                try {
                    serverWriter.close();
                } catch (IOException ex) {
                }
            }
        }
    }

    private void jButtonStopServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopServerActionPerformed
        StopRemoteServerDialog dialog = new StopRemoteServerDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
        dialog.setTitle("shutdown server");
        dialog.setVisible(true);

        ServerMan serverMan = dialog.getServerMan();
        if (serverMan == null) {
            logMessage(" 서버 정지를 취소하였습니다");
            return;
        }
        try {
            serverMan.shutdown();
            logMessage("서버 정지 성공: " + serverMan.getMessage());
        } catch (SQLException ex) {
            logMessage("서버 정지 실패: " + ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonStopServerActionPerformed

    private void jButtonRefreshTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshTreeActionPerformed
        refreshTree();
    }//GEN-LAST:event_jButtonRefreshTreeActionPerformed

    private void refreshTree() {
        serverTreePane = new ServerTreePane(serverList, jTextAreaStatus);
        TreePath selected = serverTreePane.getSelectedPath();

        MyUtilities.setCenterComponent(jPanelServers, serverTreePane);
        serverTreePane.setSelectionPath(selected);
        serverTreePane.validate();
    }

    private void jButtonDeleteServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteServerActionPerformed
        TreePath path = serverTreePane.getSelectedPath();
        if (path == null || path.getPathCount() < 2) {
            logMessage("");
            return;
        }

        Object[] paths = path.getPath();
        String serverName = paths[1].toString();
        String msg = serverName + " 정보를 삭제하시겠습니까?";
        int response = JOptionPane.showConfirmDialog(getRootPane(), msg, "서버 삭제 확인", JOptionPane.OK_CANCEL_OPTION);
        if (response != JOptionPane.OK_OPTION) {
            logMessage(serverName + " 서버 삭제를 취소했습니다.");
            return;
        }

        ServerMan deleted = serverList.delete(serverName);
        if (deleted == null) {
            logMessage(serverName + " 서버 삭제에 실패했습니다.");
            return;
        }
        logMessage(serverName + " 서버 삭제에 성공했습니다.");
        refreshTree();
    }//GEN-LAST:event_jButtonDeleteServerActionPerformed

    private void jMenuItemLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoginActionPerformed
        String hashed = BCrypt.hashpw("password01", BCrypt.gensalt());
        System.out.println("hashed = " + hashed);
        checkPassword("password01", hashed);
        checkPassword("password0!", hashed);
    }//GEN-LAST:event_jMenuItemLoginActionPerformed

    private void jButtonAddServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddServerActionPerformed
        AddServerDialog dialog = new AddServerDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
        dialog.setVisible(true);

        ServerMan serverMan = dialog.getServerMan();
        if (serverMan == null) {
            System.out.println(" 서버 생성을 취소하였습니다");
            return;
        }
        if (serverList.add(serverMan)) {
            logMessage("server 생성: " + serverMan.getPort());
            refreshTree();
            saveServerInformation();
        } else {
            logMessage("server 생성 실패: " + serverList.getMessage());
            dialog.dispose();
            return;
        }
    }//GEN-LAST:event_jButtonAddServerActionPerformed

    private boolean checkPassword(String password, String hashed) {
        if (BCrypt.checkpw(password, hashed)) {
            System.out.println(password + ": matches");
            return true;
        } else {
            System.out.println(password + ": does not match");
            return false;
        }
    }

    private void logMessage(String msg) {
        jTextAreaStatus.append(msg + "\n");
        jTextAreaStatus.setCaretPosition(jTextAreaStatus.getText().length() - 1);
        jTextAreaStatus.validate();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(H2ServerAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new H2ServerAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddServer;
    private javax.swing.JButton jButtonDeleteServer;
    private javax.swing.JButton jButtonRefreshTree;
    private javax.swing.JButton jButtonStopServer;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemLogin;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelServers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaStatus;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
